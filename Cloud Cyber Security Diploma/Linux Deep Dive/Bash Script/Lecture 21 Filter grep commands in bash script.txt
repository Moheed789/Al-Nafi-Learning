Lecture 21 : Filter grep commands in bash script.

This lecture introduces the use of the grep command in Bash for filtering content from files and outputs. It covers syntax variations, options like case-insensitive matching, 
word-level search, inverted results, contextual lines, recursive search, special character matching, and pattern-based filtering using regular expressions. Each option is 
explained with a clear description followed by its practical example.

1. Grep is used for filtering your contents

The grep command in Bash allows you to search for specific patterns in files or outputs. It is commonly used to filter relevant lines that match a search term.
Example:
    # cat abd.txt
    My name is Abdeali Dodiya
    I am from Bangalore, India
    I am working in Alnafi as Devops trainer

    # cat abd.txt | grep "Devops"
    I am working in Alnafi as Devops trainer

    # grep "Devops" abd.txt
    I am working in Alnafi as Devops trainer

2. Syntax

The grep command can be used in two main syntaxes:
Example:
    file or message | grep <option>
    OR
    grep <option> file or message

3. -i, --ignore-case

This option ignores case distinctions in patterns and input data. Uppercase and lowercase letters are treated the same.
Example:
    # cat abd1.txt
    Abdeali here, we are learning bash script

    # cat abd1.txt | grep "abdeali"
    (no output)

    # cat abd1.txt | grep -i "abdeali"
    Abdeali here, we are learning bash script

4. -w, --word-regexp

This option matches whole words only. The match must be a complete word not part of another word.
Example:
    # cat abd.txt
    My name is Abdeali Dodiya
    I am working in Alnafi as Devopsss trainer
    We are learning bash script, devopssss
    devops
    Devopsss
    Devops course very important for all

    # cat abd.txt | grep "Devops"
    I am working in Alnafi as Devopsss trainer
    Devopsss
    Devops course very important for all

    # cat abd.txt | grep -w "Devops"
    Devops course very important for all

5. -v, --invert-match

This option inverts the match. It will return lines that do NOT match the search term.

Example:
    # cat abd.txt | grep -v "Devops"

    # cat /etc/apache2/sites-available/default-ssl.conf | grep -v "#"

    # cat /etc/apache2/sites-available/default-ssl.conf | grep -v "#" > out.txt

6. -o, --only-matching

This option prints only the matched part of the line, each match on a separate line.
Example:
    # cat abd.txt | grep -o "Devops"
    Devops
    Devops
    Devops

    # cat abd.txt | grep -io "Devops"
    Devops
    devops
    devops
    Devops
    devops
    Devops

7. -c, --count

This counts how many lines match the given pattern.
Example:
    # cat abd.txt | grep -c "Devops"
    3

    # ps -ef | grep -c $USER
    157

8. -A NUM, --after-context

This prints the matching line along with NUM lines after it.
Example:
    # cat abd.txt | grep -A 1 "Alnafi"
    I am working in Alnafi as Devopsss trainer
    We are learning bash script, devopssss

9. -B NUM, --before-context

This prints the matching line along with NUM lines before it.
Example:
    # cat abd.txt | grep -B 1 "Alnafi"
    I am from Bangalore, India
    I am working in Alnafi as Devopsss trainer

10. -C NUM, --context

This prints NUM lines of context both before and after the matching line.
Example:
    # cat abd.txt | grep -C 1 "Alnafi"
    I am from Bangalore, India
    I am working in Alnafi as Devopsss trainer
    We are learning bash script, devopssss

11. -r, --recursive

This option searches for the pattern recursively in all files and subdirectories under the current directory. It's useful when you want to search through multiple files 
inside folders.
Example:
    # grep -r "Devops"
    abd.txt:I am working in Alnafi as Devopsss trainer
    abd.txt:Devopsss
    abd.txt:Devops course very important for all
    test/abd.txt:I am working in Alnafi as Devopsss trainer
    test/abd.txt:Devopsss
    test/abd.txt:Devops course very important for all

12. -l, --files-with-matches

This option only prints the filenames that contain the matched pattern, not the actual matching lines. Useful for identifying which files need review.
Example:
    # grep -l "Devops"
    # grep -l "Devops" *
    abd.txt
    grep: test: Is a directory
    # grep -l "Devops" abd.txt
    abd.txt

13. -h, --no-filename

This option removes the filename prefix in output when multiple files are searched. It shows only the matched lines.
Example:
    # grep -h "Devops" *
    I am working in Alnafi as Devopsss trainer
    Devopsss
    Devops course very important for all

14. -e, --regexp

This allows searching multiple patterns at once. You can match different keywords in one go.
Example:
    # cat abd.txt | grep -e "Devops" -e "trainer" -e "learning"
    I am working in Alnafi as Devopsss trainer
    We are learning bash script, devopssss
    Devopsss
    Devops course very important for all

15. -E (Extended regex), or egrep

This enables extended regular expressions (like using | for OR). It makes complex patterns easier.
Example:
    # cat abd.txt | grep -E "Devops|learning"
    I am working in Alnafi as Devopsss trainer
    We are learning bash script, devopssss
    Devopsss
    Devops course very important for all

    # egrep "Devops|learning" abd.txt
    (same output)

16. ^ — Beginning of line match

The caret (^) is used in grep to match patterns only at the start of a line.
Example:
    # grep -E "^Devops" abd.txt
    Devopsss
    Devops course very important for all

17. $ — End of line match

This matches lines that end with the specified pattern.
Example:
    # grep -E "all$" abd.txt
    Devops course very important for all

18. ^$ — Empty line match

This matches lines that are completely empty.
Example:
    # grep -E "^$" abd.txt

19. \ — Escaping special characters

The backslash is used to search for special characters like . or + literally instead of treating them as regex operators.
Example:
    # grep "\." abd.txt
    We will learn some automation + tools # in devops course.
    We will cover real time example which you are using day by day in your job.

    # grep "\+" abd.txt
    I am from Bangalore, India +
    We will learn some automation + tools # in devops course.

20. . — Any one character match

A dot in regex means “any one character”.
Example:
    # grep -E "W." abd.txt
    We are learning bash script, devopssss
    We will learn some automation + tools # in devops course.
    We will cover real time example which you are using day by day in your job.

21. \b — Word boundary match

\b is used to match exact whole words without partial matches.
Example:
    # grep -E "\bDevops\b" abd.txt
    Devops course very important for all

22. ? — Optional character match

The question mark ? matches zero or one instance of the character before it. Useful for optional letters.
Example:
    # cat test.txt
    india, innnnnn
    iaaaaaaaaaaaaa
    innnnnnnnnnnnnnnnnnnnnn
    in
    innnnnnnnnnnnnnnnnnn
    i
    innnnn

    # grep -E "in?" test.txt
    india, innnnnn
    iaaaaaaaaaaaaa
    innnnnnnnnnnnnnnnnnnnnn
    in
    innnnnnnnnnnnnnnnnnn
    i

23. * — Zero or more character match

The * symbol matches zero or more of the preceding character.
Example:
    # grep -E "in*" test.txt
    (all same as above)

24. {N} — Match exactly N times

You can specify exact repetitions using curly braces {}.
Example:
    # grep -E "in{5}" test.txt
    india, innnnnn
    innnnnnnnnnnnnnnnnnnnnn
    innnnnnnnnnnnnnnnnnn
    innnnn

25. {N,M} — Match between N to M times

This matches patterns that repeat between a range.
Example:
    # grep -E "in{5,7}" test.txt
    india, innnnnn
    innnnn

26. Pattern to match IP addresses

Regular expressions can be used to extract IP addresses.
Example:
    # grep -E "[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}" myip.txt
    My jboss server ip address is 192.168.1.8
    My docker server ip address os 192.168.1.10
    my brodcat address is 255.255.255.0

    # grep -E "\b[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\b" myip.txt
    (same output)

27. Task: Match URLs using grep

Use grep with a pattern to extract web URLs from a file.
Example:
    # cat urls.txt
    We have some url example so please find below for your grep command.
    Please check and let me know if you are solving.
    http://google.com
    https://google.com
    https://mywebserver.net
    https://myweb.edu
    https://mywebsite.com

    I hope you enjoyed :p