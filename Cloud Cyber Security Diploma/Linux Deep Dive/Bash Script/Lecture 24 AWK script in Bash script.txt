Lecture 24 : AWK Script in Bash Script

This lecture introduces the use of AWK in Bash scripting. AWK is a powerful text-processing tool that supports both single-line commands and full scripting. It is mainly used 
for pattern scanning and processing in structured data like logs, system outputs, and tabular text files. This lecture covers basic syntax, variable handling, formatting outputs,
filters using conditions, and control flow with loops in AWK.

AWK Modes of Use

AWK can be used in two primary ways depending on your requirements:

1. As a simple one-liner command in the terminal.
2. As a full script stored in a .awk file.

AWK Script Syntax

AWK syntax includes optional BEGIN and END blocks that run before and after the main action block. You can run it in two ways:

1. By piping input through AWK directly:
     filename | awk 'BEGIN {start_action} condition {action} END {stop_action}'
2. Or by writing the script in a file and executing it with the -f flag:
     awk -f <filename.awk>

AWK Flags and Symbols

AWK supports specific options and symbols for customization:

1. -v is used to pass a variable to the script.
2. -f is used to specify an AWK script file.
3. -F defines the input field separator.
4. OFS stands for Output Field Separator, used to format output.

Print Output with AWK

This command uses AWK to print the 2nd, 3rd, and 4th fields from the date command.
Example:
     date | awk '{print $2, $3, $4}'

Set Custom Output Separator (Hyphen)

OFS is used here to join fields using a hyphen (-) in the output.
Example:
     date | awk 'OFS="-" {print $2,$3,$4}'

Set Custom Output Separator (Slash)

This uses a slash (/) as the separator for the output fields.
Example:
     date | awk 'OFS="/" {print $2,$3,$4}'

AWK with BEGIN Block

BEGIN block is executed before processing any input lines. This prints a static message.
Example:
     awk 'BEGIN {print "Hey, I am abdeali Dodiya"}'

Simple AWK Script File

This shows how to write an AWK script with a BEGIN block inside a file named simple.awk.
Example:
     cat simple.awk
     BEGIN{
          print "Hey I am abdeali Dodiya"
     }

Run AWK Script with -f

Executes the AWK script stored in simple.awk.
Example:
     awk -f simple.awk

Check AWK Path

This command displays the path where AWK is installed.
Example:
     which awk

Make AWK Script Executable

Add a shebang line at the top of the AWK file so it can run directly as a script.
Example:
     cat simple.awk
     #!usr/bin/awk -f
     BEGIN{
          print "Hey I am abdeali Dodiya"
     }

Execute AWK Script Directly

This runs the script directly after giving it execute permissions.
Example:
     ./simple.awk

Print Logged-in Users and Their Login Time

This prints a header and lists all active sessions using who command.
Example:
     who | awk 'BEGIN {print "Active Session"} {print $1,$4}'

Extract Specific Fields from /etc/passwd

Using colon : as a separator, this prints username, UID, and home directory.
Example:
     cat /etc/passwd | awk -F ":" '{print $1,$3,$6}'

Filter Users with UID ≥ 1000

This filters users having UID 1000 or above.
Example:
     cat /etc/passwd | awk -F ":" '$3 >=1000 {print $1,$3,$6}'

Count Users with UID ≥ 1000

This pipes the filtered result into wc -l to count matching users.
Example:
     cat /etc/passwd | awk -F ":" '$3 >=1000 {print $1,$3,$6}' | wc -l

Redirect Filtered Users to a File

This saves the filtered users into a file named mycurrentuser.txt.
Example:
     cat /etc/passwd | awk -F ":" '$3 >=1000 {print $1,$3,$6}' > mycurrentuser.txt

Variable Initialization in BEGIN

This assigns value 100 to a variable ali.
Example:
     awk 'BEGIN {ali=100}'

Incorrect Variable Print

This shows an incorrect syntax where $ali is used instead of just ali.
Example:
     awk 'BEGIN {ali=100 print $ali}'

Another Incorrect Print Syntax

This also misses a semicolon or comma between the variable assignment and print statement.
Example:
     awk 'BEGIN {ali=100 print ali}'

Correct Variable Assignment and Print

This is the proper way to assign and print a variable.
Example:
     awk 'BEGIN {ali=100; print ali}'

Incorrect Print Using $ali

Using $ali is incorrect unless ali represents a field number.
Example:
     awk 'BEGIN {ali=100; print $ali}'

Assign Shell Variable

Assigns value 51 to shell variable num.
Example:
     num=51

Pass Static Value via -v

Passes 100 as variable n into AWK.
Example:
     awk -v n=100 'BEGIN {print n}'

Incorrect Use of Shell Variable Name as String

num is not evaluated because it’s not referenced properly.
Example:
     awk -v n=num 'BEGIN {print n}'

Correct Passing of Shell Variable

Passes value stored in num using $num.
Example:
     awk -v n=$num 'BEGIN {print n}'

AWK with BEGIN and END Block

This highlights a line matching "alnafi" with BEGIN and END messages.
Example:
     cat /etc/passwd | awk 'BEGIN {print "BEGIN Block"} /alnafi/ {print $0} END {print "END Block"}'

Echo Example

Simple echo output.
Example:
     echo "Abdeali ABD Ali"

Extract First Word from String

Extracts the first word from space-separated string.
Example:
     echo "Abdeali ABD Ali" | awk -F " " '{print $1}'

Extract Second Word

Prints second word.
Example:
     echo "Abdeali ABD Ali" | awk -F " " '{print $2}'

Extract Third Word

Prints third word.
Example:
     echo "Abdeali ABD Ali" | awk -F " " '{print $3}'

Custom Separator ‘ABD’

Splits string using ABD as the separator and prints first part.
Example:
     echo "Abdeali ABD Ali" | awk -F ABD '{print $1}'

Print Second Part After Separator

Prints text after ABD.
Example:
     echo "Abdeali ABD Ali" | awk -F ABD '{print $2}'

Content of num.txt

Contents of a file with numbers.
Example:
     cat num.txt
     20
     1
     21
     16
     5
     21
     50
     70
     21
     89

Filter Values ≥ 30

Prints numbers equal to or greater than 30.
Example:
     cat num.txt | awk '{if ($1 >= 30) print $1}'

Filter Values ≤ 30

Prints numbers less than or equal to 30.
Example:
     cat num.txt | awk '{if ($1 <= 30) print $1}'

Filter Between 10 and 30

Prints numbers in range 10 to 30 using logical AND.
Example:
     cat num.txt | awk '{if ($1 >= 10 && $i <= 30) print $1}'

Use of FOR Loop in BEGIN Block

Prints numbers 1 through 10 using for loop.
Example:
     awk 'BEGIN {for (i=1; i<=10; i++) print "The number", i}'

Use of WHILE Loop in BEGIN Block

Prints numbers 1 through 10 using while loop.
Example:
     awk 'BEGIN {i=1; while(i <= 10) {print "The number is :", i++}}'

List Files and Print Name and Size

Prints file name and size in a directory.
Example:
     ls -ltrh | awk '{print $9,$5}'

Formatted Output with Custom Separator

Prints file name and size with custom tab separator.
Example:
     ls -ltrh | awk -v OFS='\\t\\t' 'BEGIN {printf "%s\t\t%s\n", "Name", "Size"} {print $9,$5}'