Lecture 28 : Realtime Hands-on practical in bash script. [ Part - 1 ]

This lecture focuses on real-time usage of Bash scripting in Linux environments. It demonstrates how to monitor system services like apache2 and sshd using commands such as 
systemctl and ps, check disk usage, and send alerts through conditional scripting. The session includes dynamic service monitoring using user input and implements basic 
automation like logging and email notifications.

1. Fetch specific status line for apache2 service using awk

This command extracts the 5th line from the systemctl status apache2 output and filters out the first word after the colon.
Example:
    systemctl status apache2 | awk 'NR==5' | awk -F : '{print $2}' | awk '{print $1}'

2. Fetch specific status line for sshd service using awk

Similar to the previous point, but applied to the sshd service and pulling the 3rd line.
Example:
    systemctl status sshd | awk 'NR==3' | awk -F: '{print $2}' | awk '{print $1}'

3. Check if sshd service is active

Directly returns the current state of the sshd service.
Example:
    systemctl is-active sshd

4. Check if apache2 service is active

Returns the current status of the apache2 service.
Example:
    systemctl is-active apache2

5. Check if apache3 service is active

This will likely return "inactive" or "not found" if apache3 isn't installed.
Example:
    systemctl is-active apache3

6. Static script to check sshd service status

This script checks whether the sshd service is running and prints the result accordingly.
Example:
    #!/bin/bash
    STATUS=$(systemctl is-active sshd)
    echo $STATUS
    if [[ $STATUS == "active" ]]
    then
        echo "Service is running"
    else
        echo "Sorry..!! Service is not running"
        exit 1
    fi

7. Dynamic service status script using user input

The user enters a service name, and the script checks if it is active.
Example:
    #!/bin/bash
    echo "enter your service"
    read service_name
    STATUS=$(systemctl is-active $service_name)
    if [[ $STATUS == "active" ]]
    then
        echo "$service_name service is running"
    else
        echo "Sorry..!! $service_name ervice is not running"
        exit 1
    fi

8. Alerting via mail if service is down

This enhancement sends an email alert if the service is not running.
Example:
    #!/bin/bash
    echo "enter your service"
    read service_name
    STATUS=$(systemctl is-active $service_name)
    if [[ $STATUS == "active" ]]
    then
        echo "$service_name service is running"
    else
        echo "Sorry..!! $service_name ervice is not running"
        echo "Sorry..!! $service_name ervice is not running" | mail -s "Service Down $service_name | ALERT" automation52786@gmail.com
        exit 1
    fi

9. Check apache2 service using ps command

Lists apache2 processes from the process table.
Example:
    ps -ax | grep apache2 | grep -v grep

10. Count number of apache2 processes

Counts how many apache2 processes are currently running.
Example:
    ps -ax | grep apache2 | grep -v grep | wc -l

11. Service check using ps and conditional output

Reads a service name and checks if any related process is running using ps.
Example:
    #!/bin/bash
    echo "ENTER THE SERVICE NAME"
    read service_name
    count=$(ps -ax | grep $service_name | grep -v grep | wc -l)
    if [[ "$count" != "0" ]]
    then
        echo "$service_name service is running, Everything is fine...!!!"
    else
        echo "$service_name is not running due to some problem"
    fi

12. Extract disk usage percentage using df and awk

Grabs the percentage disk usage of a specific logical volume.
Example:
    df -h | grep /dev/mapper/ubuntu--vg-ubuntu--lv | awk '{print $5}' | tr '%' ' '

13. Disk space monitoring script

Checks disk space and notifies whether it's under or over 90%.
Example:
    #!/bin/bash
    disk_status=$(df -h | grep /dev/mapper/ubuntu--vg-ubuntu--lv | awk '{print $5}' | tr '%' ' ')
    if [ $disk_status -le 90 ]
    then
        echo "Size is Good"
    else
        echo $disk_status
        echo " Disk Space is full"
    fi

14. List disk space info excluding header using awk

Skips the first line of the output to only show relevant partitions.
Example:
    df -h | awk 'NR>1'

15. Another way to skip header row

This uses NR!=1 to exclude the header.
Example:
    df -h | awk 'NR!=1'

16. Using tail to skip first line in output

tail -n+2 starts reading from the second line.
Example:
    df -h | tail -n+2

17. Remove percentage signs from disk usage output

Cleans output by removing %.
Example:
    df -h | awk 'NR>1' | sed s/%//g

18. Print only disk usage values

Prints just the fifth column after cleaning.
Example:
    df -h | awk 'NR>1' | sed s/%//g | awk '{print $5}'

19. Show partitions using more than 50% disk space

Filters partitions with over 50% usage.
Example:
    df -h | awk 'NR>1' | sed s/%//g | awk '{ if ($5 > 50) print $0 }'

20. Archive logs if disk usage exceeds threshold

Archives auth.log if disk usage goes above 50%, and logs the status.
Example:
    #!/bin/bash
    time=$(date +%d-%m-%y-%H)
    disk_status=$(df -h | grep /dev/mapper/ubuntu--vg-ubuntu--lv | awk '{print $5}' | tr -d %)
    if [ "$disk_status" -le 50 ]
    then
        echo "$disk_status is Good"
    else
        cd /root/lect28/log
        tar cvf auth.log | gzip -c > /root/lect28/log/auth.log-$time.tgz
        echo "" > auth.log
        echo "Var log alert has been archived"
    fi

TASK: Format df output into comma-separated report

You are required to generate formatted disk usage data including custom fields like date, IP address, and hostname in a comma-separated style.
Example:
    # Desired Output:
    1,udev,461M,0,461M,0%,/dev,23-07-22,192.168.1.8,abdealinode2.local
    2,tmpfs,99M,708K,98M,1%,/run
    3,/dev/mapper/ubuntu--vg-ubuntu--lv,8.8G,5.2G,3.3G,62%,/
    4,tmpfs, 493M,0,493M,0% /dev/shm
    tmpfs,5.0M,0,5.0M,0% /run/lock
    tmpfs,493M,0,493M,0%/sys/fs/cgroup
    /dev/sda2,976M,220M,689M 25%/boot
    tmpfs,99M,0,99M,0%,/run/user/1001
    tmpfs,99M,0,99M,0%,/run/user/1000