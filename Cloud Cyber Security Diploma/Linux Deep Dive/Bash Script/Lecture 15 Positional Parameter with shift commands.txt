Lecture 15 : Positional Parameter with shift commands.

This lecture explains how positional parameters work in bash scripting. Positional parameters allow us to access the inputs passed to a script, such as $1, $2, etc. The shift 
command is used to move these parameters leftward. We also explore the difference between $* and $@ in looping constructs.

1. Position Parameter

Positional parameters are special variables that are used to access command-line arguments in a bash script:
1. $0 --> Program or script name
2. $1..$9 --> parameter passed
3. $# --> Count the total number of parameter
4. $* --> > Disply the parameter passed
5. $@ same as $* both are same
6. $$ --> Provide the current PID of shell
Example:
    #!/bin/bash
    echo "This is positional parameter example script" $0
    echo "Hello, My name is : "$1
    echo "Here is " $2
    echo "this is " $3
    echo "total count value is " $#
    echo "Display the parameter the passed" $*
    echo "Fetch information" $@
    echo "PID of current shell"
    echo "Exit status of last executed command" $?

2. Shift Position Parameter:

The shift command is used to move positional parameters to the left. Each shift drops the first parameter and shifts the rest.

1. Single Shift Position:

When shift is used once, $2 becomes $1, $3 becomes $2, and so on. The total count of parameters also decreases by one.
Example:
    cat shift.sh
    #!/bin/bash
    echo "count $#"
    echo "$1 $2 $3"
    shift
    echo "$1 $2 $3"
    echo "count $#"

Execution Output

    # ./shift.sh Abdeali Dodiya Ali
    count 3
    Abdeali Dodiya Ali
    Dodiya Ali
    count 2 

2. Multi Position Shift:

You can shift multiple positions at once by passing a number to shift, like shift 2, which will discard $1 and $2.
Example:
    # cat shift.sh
    #!/bin/bash
    echo "count $#"
    echo "$1 $2 $3 $4 $5"
    shift 2
    echo "$1 $2 $3 $4 $5"
    echo "count $#"

Execution Output

    # ./shift.sh Abdeali Dodiya Ali ABd Kazim
    count 5
    Abdeali Dodiya Ali ABd Kazim
    Ali Abd Kazim
    count 3

3. Difference between $@ and $*:

Both $@ and $* return all the parameters passed to the script, but they behave differently when quoted.
    1. $* treats all parameters as a single string.
    2. $@ treats each quoted parameter as a separate string.
Example:
    echo -e "Example of: \$*\n"
    for each in $*
    do
        echo $each
    done
    echo -e "Example: \$@\n"
    for each in "$@"
    do
        echo $each
    done

Execution Output

    ./diff.sh Abdeali Dodiya Ali "1 2" "34" 5
    Example of: $*
    Abdeali
    Dodiya
    Ali 
    1
    2 
    3 
    4 
    5
    
    Example: $@
    Abdali
    Dodiya
    Ali
    1 2
    3 4
    5