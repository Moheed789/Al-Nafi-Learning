Lecture 19 : Understanding to Array in Bash script.

This lecture explains how arrays work in Bash scripting. It includes the basics of declaring arrays, accessing their values, using positive and negative indexes, reading values 
into arrays, and working with associative arrays. It demonstrates how to handle elements with commands, how to retrieve values and indexes, and how to declare key-value pairs 
using associative arrays.

1. Array:

An array in Bash is a data structure that allows storage of multiple values in a single variable. These values can be accessed using index numbers.
Example:
    2003 y="Abdeali"
    xyz=1.2
    echo $ab
    echo "$xyz"
    clear
    abd=(5 2 3 abdeali)
    echo $abd
    abd1=(abd "Abdeali Dodiya")
    echo $abd1
    clear
    echo "$abd1"
    echo "$abd"
    echo "${abd[*]}"
    echo "${abd1[*]}"
    echo "${abd1[@]}"

2. Array Using Command Output:

Arrays can store command output and numerical values together. You can declare an array with mixed content including integers and command names.
Example:
    cmd=(2 5 8 52 53 hostname -i)
    echo "${cmd[*]}"
    25 8 52 53 hostname-i
    cmd1=(1234567)
    echo "${cmd1[*]}"
    1234567
    #cmd1=(1234567)
    variable 1234567

3. Positive Index:

In Bash arrays, indexing starts from 0 for the first element and increases by 1.
Example:
    Positive Index: 0 1 2 3 4 5 6

4. Negative Index:

Bash doesn't directly support negative indexing like Python, but conceptually, these are the positions counted from the end of the array.
Example:
    Negative Index: -7 -6 -5 -4 -3 -2 -1

5. Array Slicing and Indexing:

You can retrieve partial values from arrays using slicing, and access specific elements or indexes.
Example:
    echo "${cmd[@]}"
    2 5 8 52 53 hostname -i

    echo "${cmd[@]:2}"
    8 52 53 hostname -i

    echo "${cmd[@]:1}"
    5 8 52 53 hostname -i

    echo "${cmd[@]:1:2}"
    58

    echo "${cmd[@]:1:3}"
    5852

    echo "${cmd[@]:1:4}"
    58 52 53

    cmd=(2 5 8 52 53 "hostname -i")
    echo "${cmd[@]}"
    2 5 8 52 53 hostname -i

    echo "${!cmd[@]}"
    0 1 2 3 4 5

    echo "${cmd[2]}"
    8

    echo "${#cmd[@]}"
    6

    cmd=(2 5 8 52 53 hostname -i)
    echo "${#cmd[@]}"
    7

    echo "${!cmd[@]}"
    0 1 2 3 4 5 6

6. Read Array:

The read command is used to take input from the user. Using read -a reads input into an array split by spaces.
Example:
    read test
    Abd Ali Kazim
    echo $test
    Abd Ali Kazim
    echo "${test[@]}"
    Abd Ali Kazim
    echo "${test[1]}"
    echo "${test[0]}"
    Abd Ali Kazim
    echo "${test[1]}"
    echo "${test[2]}"
    echo "${#test[@]}"
    1
    echo "${!test[@]}"
    0

    read -a test1
    ABD ali KAZIM
    echo "${!test1[@]}"
    0 1 2
    echo "${#test1[@]}"
    3
    echo "${test1[@]}"
    ABD ali KAZIM
    echo "${test1[2]}"
    KAZIM

    test=([abd]=ali [12]=2 [13]=5)
    echo "${test[@]}"
    ali 2 5
    echo "${!test[@]}"
    abd 12 13

    echo "${test[12]}"
    2
    echo "${test[13]}"
    5


7. Associative Array:

Associative arrays allow you to use named keys instead of indexed positions. These are declared using declare -A.
Example:
    declare -A mytest
    mytest=([fname]="Abdeali" [Iname]="Dodiya" [15]="ABD")
    echo "${mytest[@]}"
    Abdeali Dodiya ABD
    echo "${#mytest[@]}"
    3
    echo "${!mytest[@]}"
    fname Iname 15
    echo "${mytest[fname]}"
    Abdeali

8. Key-Value Display:

You can use echo "${!array[@]}" to display all keys of an associative array.
Example:
    echo "${!mytest[@]}"
    fname Iname 15

9. Simple Arrays with Mixed Index:

You can also create arrays with numeric and associative style keys. Associative arrays need declare -A.
Example:
    echo "${!test[@]}"
    abd 12 13

    test1=([one]=1 [two]=2 [three]=3)
    echo "${!test1[*]}"
    one two three
    echo "${test1[*]}"
    1 2 3
    echo "${test1[@]}"
    1 2 3

    test2=([3]=1 [5]=2 [8]=3)
    echo "${test2[@]}"
    1 2 3
    echo "${!test2[@]}"
    3 5 8

    declare -A test3
    test3=([one]=1 [two]=2 [three]=3)
    echo "${!test3[@]}"
    one two three
    echo "${#test3[@]}"
    3
    echo "${test3[@]}"
    1 2 3
    echo "${test3[one]}"
    1
    echo "${test3[two]}"
    2
    echo "${test3[three]}"
    3